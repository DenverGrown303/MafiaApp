-- MySQL Script generated by MySQL Workbench
-- Thu Mar 24 11:51:46 2016
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mafiaUmbrellaTables
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `mafiaUmbrellaTables` ;

-- -----------------------------------------------------
-- Schema mafiaUmbrellaTables
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mafiaUmbrellaTables` DEFAULT CHARACTER SET utf8 ;
USE `mafiaUmbrellaTables` ;

-- -----------------------------------------------------
-- Table `mafiaUmbrellaTables`.`Game`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mafiaUmbrellaTables`.`Game` ;

CREATE TABLE IF NOT EXISTS `mafiaUmbrellaTables`.`Game` (
  `gameID` INT NOT NULL,
  `userID` INT NOT NULL,
  `userName` VARCHAR(100) NOT NULL,
  `password` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`gameID`, `userID`, `userName`, `password`));


-- -----------------------------------------------------
-- Table `mafiaUmbrellaTables`.`family`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mafiaUmbrellaTables`.`family` ;

CREATE TABLE IF NOT EXISTS `mafiaUmbrellaTables`.`family` (
  `gameID` INT NOT NULL,
  `familyName` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`gameID`, `familyName`),
  CONSTRAINT `gameID`
    FOREIGN KEY (`gameID` , `familyName`)
    REFERENCES `mafiaUmbrellaTables`.`Game` (`gameID` , `userName`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mafiaUmbrellaTables`.`reserves`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mafiaUmbrellaTables`.`reserves` ;

CREATE TABLE IF NOT EXISTS `mafiaUmbrellaTables`.`reserves` (
  `firstName` VARCHAR(100) NOT NULL,
  `lastName` VARCHAR(100) NOT NULL,
  `age` INT NOT NULL,
  `rank` VARCHAR(100) NULL,
  `familyName` VARCHAR(100) NULL,
  `imageLocation` VARCHAR(100) NOT NULL,
  `specialty` VARCHAR(100) NOT NULL,
  `soldierNumber` INT NOT NULL AUTO_INCREMENT,
  `gameID` INT NOT NULL,
  PRIMARY KEY (`soldierNumber`, `gameID`, `firstName`, `lastName`, `familyName`, `specialty`, `rank`),
  INDEX `gameID_idx` (`gameID` ASC),
  CONSTRAINT `gameID`
    FOREIGN KEY (`gameID`)
    REFERENCES `mafiaUmbrellaTables`.`Game` (`gameID`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mafiaUmbrellaTables`.`familyDons`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mafiaUmbrellaTables`.`familyDons` ;

CREATE TABLE IF NOT EXISTS `mafiaUmbrellaTables`.`familyDons` (
  `gameID` INT NOT NULL,
  `firstName` VARCHAR(100) NOT NULL COMMENT '	',
  `lastName` VARCHAR(100) NOT NULL,
  `age` INT NOT NULL,
  `rank` VARCHAR(100) NOT NULL,
  `specialty` VARCHAR(100) NOT NULL,
  `familyName` VARCHAR(100) NOT NULL,
  `imageLocation` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`gameID`, `firstName`, `lastName`, `rank`, `specialty`, `familyName`),
  INDEX `lastName_idx` (`gameID` ASC, `familyName` ASC),
  CONSTRAINT `lastName`
    FOREIGN KEY (`gameID` , `familyName`)
    REFERENCES `mafiaUmbrellaTables`.`family` (`gameID` , `familyName`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mafiaUmbrellaTables`.`emails`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mafiaUmbrellaTables`.`emails` ;

CREATE TABLE IF NOT EXISTS `mafiaUmbrellaTables`.`emails` (
  `gameID` INT NOT NULL,
  `emails` VARCHAR(1000) NOT NULL,
  `emailID` INT NOT NULL AUTO_INCREMENT,
  `senderFirstName` VARCHAR(100) NULL,
  `senderLastName` VARCHAR(100) NULL,
  `recipientFirstName` VARCHAR(100) NULL,
  `recipientLastName` VARCHAR(100) NULL,
  INDEX `gameID_idx` (`gameID` ASC),
  PRIMARY KEY (`emailID`, `gameID`),
  CONSTRAINT `gameID`
    FOREIGN KEY (`gameID`)
    REFERENCES `mafiaUmbrellaTables`.`Game` (`gameID`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mafiaUmbrellaTables`.`retailStore`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mafiaUmbrellaTables`.`retailStore` ;

CREATE TABLE IF NOT EXISTS `mafiaUmbrellaTables`.`retailStore` (
  `gameID` INT NOT NULL,
  `storeName` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`gameID`));


-- -----------------------------------------------------
-- Table `mafiaUmbrellaTables`.`retailEmployees`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mafiaUmbrellaTables`.`retailEmployees` ;

CREATE TABLE IF NOT EXISTS `mafiaUmbrellaTables`.`retailEmployees` (
  `gameID` INT NOT NULL,
  `empFirstName` VARCHAR(100) NOT NULL,
  `empLastName` VARCHAR(100) NOT NULL,
  `empDepartment` VARCHAR(45) NOT NULL,
  `empFired` TINYINT(1) NOT NULL,
  PRIMARY KEY (`gameID`, `empFirstName`, `empLastName`, `empDepartment`),
  CONSTRAINT `gameID`
    FOREIGN KEY (`gameID`)
    REFERENCES `mafiaUmbrellaTables`.`retailStore` (`gameID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `mafiaUmbrellaTables`.`inventory`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mafiaUmbrellaTables`.`inventory` ;

CREATE TABLE IF NOT EXISTS `mafiaUmbrellaTables`.`inventory` (
  `gameID` INT NOT NULL,
  `productID` INT NOT NULL AUTO_INCREMENT,
  `productDescription` VARCHAR(100) NOT NULL,
  `productImage` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`productID`, `gameID`),
  CONSTRAINT `gameID`
    FOREIGN KEY (`gameID`)
    REFERENCES `mafiaUmbrellaTables`.`retailStore` (`gameID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `mafiaUmbrellaTables`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mafiaUmbrellaTables`.`user` ;

CREATE TABLE IF NOT EXISTS `mafiaUmbrellaTables`.`user` (
  `userName` VARCHAR(100) NOT NULL,
  `password` VARCHAR(100) NOT NULL,
  `userID` INT NOT NULL,
  `gameID` INT NOT NULL,
  PRIMARY KEY (`gameID`, `userID`),
  CONSTRAINT `gameID`
    FOREIGN KEY (`gameID`)
    REFERENCES `mafiaUmbrellaTables`.`Game` (`gameID`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mafiaUmbrellaTables`.`userData`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mafiaUmbrellaTables`.`userData` ;

CREATE TABLE IF NOT EXISTS `mafiaUmbrellaTables`.`userData` (
  `userID` INT NOT NULL,
  `userFirstName` VARCHAR(100) NOT NULL,
  `userLastName` VARCHAR(100) NOT NULL,
  `userScore` VARCHAR(100) NULL,
  PRIMARY KEY (`userID`, `userFirstName`, `userLastName`));


-- -----------------------------------------------------
-- Table `mafiaUmbrellaTables`.`Priors`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mafiaUmbrellaTables`.`Priors` ;

CREATE TABLE IF NOT EXISTS `mafiaUmbrellaTables`.`Priors` (
  `gameID` INT NOT NULL,
  `Prior` VARCHAR(1000) NOT NULL,
  `firstName` VARCHAR(100) NOT NULL,
  `lastName` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`gameID`, `Prior`, `firstName`, `lastName`),
  CONSTRAINT `gameID`
    FOREIGN KEY (`gameID`)
    REFERENCES `mafiaUmbrellaTables`.`Game` (`gameID`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mafiaUmbrellaTables`.`jobs`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mafiaUmbrellaTables`.`jobs` ;

CREATE TABLE IF NOT EXISTS `mafiaUmbrellaTables`.`jobs` (
  `gameID` INT NOT NULL,
  `userID` VARCHAR(100) NOT NULL,
  `date` DATETIME GENERATED ALWAYS AS (),
  `request` VARCHAR(1000) NOT NULL,
  `goonFirstName` VARCHAR(100) NOT NULL,
  `goonLastName` VARCHAR(100) NOT NULL,
  `complete` TINYINT(1) NOT NULL,
  PRIMARY KEY (`gameID`, `userID`, `date`, `goonFirstName`, `goonLastName`, `complete`),
  CONSTRAINT `gameID`
    FOREIGN KEY (`gameID`)
    REFERENCES `mafiaUmbrellaTables`.`Game` (`gameID`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mafiaUmbrellaTables`.`favors`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mafiaUmbrellaTables`.`favors` ;

CREATE TABLE IF NOT EXISTS `mafiaUmbrellaTables`.`favors` (
  `userID` INT NOT NULL,
  `gameID` INT NOT NULL,
  `goonFirstName` VARCHAR(100) NOT NULL,
  `goonLastName` VARCHAR(100) NOT NULL,
  `consequence` VARCHAR(1000) NOT NULL,
  `description` VARCHAR(1000) NOT NULL,
  PRIMARY KEY (`userID`, `gameID`),
  INDEX `fk_goonName_idx` (`goonFirstName` ASC, `goonLastName` ASC),
  CONSTRAINT `fk_gameID`
    FOREIGN KEY (`userID` , `gameID`)
    REFERENCES `mafiaUmbrellaTables`.`Game` (`userID` , `gameID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_goonName`
    FOREIGN KEY (`goonFirstName` , `goonLastName`)
    REFERENCES `mafiaUmbrellaTables`.`reserves` (`firstName` , `lastName`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_userID`
    FOREIGN KEY (`userID` , `gameID`)
    REFERENCES `mafiaUmbrellaTables`.`user` (`userID` , `gameID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `mafiaUmbrellaTables`.`shoppingCart`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mafiaUmbrellaTables`.`shoppingCart` ;

CREATE TABLE IF NOT EXISTS `mafiaUmbrellaTables`.`shoppingCart` (
  `userID` INT NOT NULL,
  `productID` INT NOT NULL,
  PRIMARY KEY (`userID`),
  INDEX `productID_idx` (`productID` ASC),
  CONSTRAINT `userID`
    FOREIGN KEY (`userID`)
    REFERENCES `mafiaUmbrellaTables`.`userData` (`userID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `productID`
    FOREIGN KEY (`productID`)
    REFERENCES `mafiaUmbrellaTables`.`inventory` (`productID`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mafiaUmbrellaTables`.`employeeReviews`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mafiaUmbrellaTables`.`employeeReviews` ;

CREATE TABLE IF NOT EXISTS `mafiaUmbrellaTables`.`employeeReviews` (
  `gameID` INT NOT NULL,
  `empFirstName` VARCHAR(100) NOT NULL,
  `empLastName` VARCHAR(100) NOT NULL,
  `employeeReview` VARCHAR(1000) NOT NULL,
  PRIMARY KEY (`gameID`, `empFirstName`, `empLastName`),
  CONSTRAINT `retailEmployees`
    FOREIGN KEY (`gameID` , `empFirstName` , `empLastName`)
    REFERENCES `mafiaUmbrellaTables`.`retailEmployees` (`gameID` , `empFirstName` , `empFirstName`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mafiaUmbrellaTables`.`reserves_has_Priors`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mafiaUmbrellaTables`.`reserves_has_Priors` ;

CREATE TABLE IF NOT EXISTS `mafiaUmbrellaTables`.`reserves_has_Priors` (
  `reserves_firstName` VARCHAR(100) NOT NULL,
  `reserves_lastName` VARCHAR(100) NOT NULL,
  `Priors.prior` VARCHAR(1000) NOT NULL,
  PRIMARY KEY (`reserves_firstName`, `reserves_lastName`, `Priors.prior`),
  INDEX `fk_reserves_has_Priors_reserves1_idx` (`reserves_firstName` ASC, `reserves_lastName` ASC),
  INDEX `fk_reserves_has_Priors_Priors1_idx` (`Priors.prior` ASC),
  CONSTRAINT `fk_reserves_has_Priors_reserves1`
    FOREIGN KEY (`reserves_firstName` , `reserves_lastName`)
    REFERENCES `mafiaUmbrellaTables`.`reserves` (`firstName` , `lastName`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_reserves_has_Priors_Priors1`
    FOREIGN KEY (`Priors.prior`)
    REFERENCES `mafiaUmbrellaTables`.`Priors` (`Prior`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
